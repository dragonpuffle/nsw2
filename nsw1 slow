#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <limits>
#include <cmath>

const double INF = std::numeric_limits<double>::infinity();
using namespace std;

struct Vertex {
    vector<double> coordinates;
    Vertex(const vector<double> &coords) : coordinates(coords) {}
};

class Graph {
private:
    int numVertices; // Количество вершин
    int dimension;   // Размерность пространства
    vector<Vertex> vertices; // Вершины с координатами
    vector<vector<int>> adjacencyList; // Список смежности для ребер

public:
    Graph(int numVertices, int dimension) : numVertices(numVertices), dimension(dimension) {
        adjacencyList.resize(numVertices);
    }

    void addEdge(int from, int to) {
        adjacencyList[from].push_back(to);
        adjacencyList[to].push_back(from);
    }

    void addVertex(const vector<double> &coordinates) {
        vertices.push_back(Vertex(coordinates));
    }

    vector<int> getFriends(int vertex) const {
        return adjacencyList[vertex];
    }


    double distance(const vector<double> &query, const vector<double> &vertex_point) {
        double dist = 0;
        for (int i = 0; i < query.size(); i++) {
            dist += pow(query[i] - vertex_point[i], 2);
        }
        return sqrt(dist); //
    }

    int Greedy_search(int query, int venter_point) {
        int vcurr = venter_point;
        double dmin = distance(vertices[query].coordinates, vertices[vcurr].coordinates);
        int vnext = -1;
        for (int vfriend: getFriends(vcurr)) {// изменить на this->
            double dist = distance(vertices[query].coordinates, vertices[vfriend].coordinates);
            if (dist < dmin) {
                dmin = dist;
                vnext = vfriend;
            }
        }
        if (vnext == -1) {
            return vcurr;
        } else {
            return Greedy_search(query, vnext);
        }
    }

    int getRandomEnterPoint() {
        return rand() % (numVertices);
    }

    vector<int> Multi_Search(int query, int m) {
        vector<int> results;
        for (int i = 0; i < m; i++) {
            int enter_point = getRandomEnterPoint();
            int local_min = Greedy_search(query, enter_point);
            if (find(results.begin(), results.end(), local_min) == results.end()) {
                results.push_back(local_min);
            }
        }
        return results;
    }

    int Get_Best_Element(int q, const vector<int>& objects) {
        double d_min = INF;
        int obj_best = -1;
        for (int obj: objects) {
            double dist = distance(vertices[q].coordinates, vertices[obj].coordinates);
            if (dist < d_min) {
                obj_best = obj;
                d_min = dist;
            }
        }
        return obj_best;
    }

    void Nearest_Neighbor_Add(int new_object, int l, int init_attempts) {
        vector<int> local_mins = Multi_Search(new_object, init_attempts);
        vector<int> neighborhood;
        for (int local_min: local_mins) {
            for (int lmfriend: getFriends(local_min)) {
                neighborhood.push_back(lmfriend);
            }
        }
        sort(neighborhood.begin(), neighborhood.end(), [&new_object, this](const int a, const int b) {
            return distance(vertices[a].coordinates, vertices[new_object].coordinates) <
                   distance(vertices[b].coordinates, vertices[new_object].coordinates);
        });
        for (int i = 0; i < l && i < neighborhood.size(); i++) {
            addEdge(neighborhood[i], new_object);
        }
    }

    vector<int> Complete_search(int q, int m) {
        vector<pair<int,double>> distances;
        for (int i = 0; i < numVertices-1; i++) {
            distances.push_back(make_pair(i,distance(vertices[q].coordinates, vertices[i].coordinates)));
        }

        sort(distances.begin(), distances.end(),
             [](const pair<int, double>& a, const pair<int, double>& b) {
                 return a.second < b.second;
             });

        vector <int> nearest_points;
        for (int i=0;i<m && i < distances.size();i++){
            nearest_points.push_back(distances[i].first);
        }
        return nearest_points;
    }
};

int main() {
    // Создаем граф с vert-вершинами в dim-мерном пространстве
    int vert = 1000;
    int dim = 2;
    int l = 100; // Параметр (степень вершины при построении графа)
    int m = 50; // Параметр (количество ближайших точек), размер очереди
    int init_attempts = 100; // Параметр (количество точек, добавляемых на каждом шаге построения графа), число поисков
    Graph graph(vert + 1, dim);

    vector<double> point;
    srand(static_cast<unsigned int>(time(nullptr)));
    for (int i=0;i<vert;i++){
        point.clear();
        for (int j=0;j<dim;j++){
            int randomNumber = (rand() % (201)) - 100;
            point.push_back(randomNumber);
        }
        graph.addVertex(point);
        graph.Nearest_Neighbor_Add(i, l, init_attempts);
    }

    vector<double> query;
    for (int j=0;j<dim;j++){
        int randomNumber = (rand() % (201)) - 100;
        query.push_back(randomNumber);
    }
    graph.addVertex(query);

    //for (int i = 0; i < vert; i++) {
    //    graph.Nearest_Neighbor_Add(i, l, init_attempts);
    //}

    vector<int> true_results = graph.Complete_search(vert, m);
    //cout << "First true m-nearest points:\n";
    //for (int i=0;i<m && i < true_results.size();i++){ //
    //    cout << i+1 << ": " << true_results[i] << "\n";
    //}
    int true_result = graph.Get_Best_Element(vert, true_results);
    //cout << "The true nearest is: " << true_result << "\n";

    //cout << "First m-nearest points:\n";
    vector<int> results = graph.Multi_Search(vert, m);
    //for (int i=0;i<m && i < results.size();i++){ //
    //    cout << i+1 << ": " << results[i] << "\n";
    //}
    int result = graph.Get_Best_Element(vert, results);
    //cout << "The nearest is: " << result << "\n";

    int true_positive = 0;
    int false_positive = 0;
    int false_negative = 0;

    for (int i = 0; i < m; ++i) {
        if (find(results.begin(), results.end(), true_results[i]) != results.end()) {
            true_positive++;
        } else {
            false_negative++;
        }
    }

    false_positive = results.size() - true_positive;

    double precision = static_cast<double>(true_positive) / (true_positive + false_positive);
    double recall = static_cast<double>(true_positive) / (true_positive + false_negative);

    cout << "Precision: " << precision << endl;
    cout << "Recall: " << recall << endl;
    return 0;
}
